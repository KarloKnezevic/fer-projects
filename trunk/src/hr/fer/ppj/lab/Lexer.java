/* The following code was generated by JFlex 1.4.3 on 30/09/09 17:29 */

package hr.fer.ppj.lab;

import java.util.ArrayList;
import java.util.List;

/**
 * Lexer
 */

class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\35"+
    "\1\41\1\0\1\7\1\40\1\34\1\40\1\40\1\40\1\5\1\40"+
    "\1\40\1\40\1\40\1\4\1\7\11\7\1\40\1\40\1\35\1\36"+
    "\1\35\2\0\32\6\1\40\1\42\1\40\1\0\1\7\1\0\1\13"+
    "\1\10\1\15\1\25\1\12\1\26\1\31\1\17\1\23\1\6\1\14"+
    "\1\27\1\6\1\21\1\20\2\6\1\11\1\16\1\22\1\24\1\33"+
    "\1\32\1\30\2\6\1\40\1\37\1\40\1\0\41\7\2\0\4\7"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6"+
    "\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6"+
    "\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6"+
    "\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6"+
    "\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7"+
    "\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6"+
    "\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7"+
    "\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\2\6\2\7\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\7\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\7\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\1\7\7\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7"+
    "\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0"+
    "\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0"+
    "\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6"+
    "\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6"+
    "\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6"+
    "\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6"+
    "\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\7\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\1\7\1\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"+
    "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\17\0\4\7\32\0\5\7\20\0\2\7\23\0\1\7\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\7\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\7\u0e81\0\2\6\1\7\31\0\17\7\1\0\5\6\2\0"+
    "\3\7\2\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6"+
    "\1\7\4\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6"+
    "\2\0\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6"+
    "\1\7\3\0\20\7\20\0\4\7\17\0\2\7\30\0\3\7\31\0"+
    "\1\7\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\7\13\0"+
    "\12\7\7\0\32\6\4\0\1\7\1\0\32\6\12\0\1\7\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\7"+
    "\3\0\2\7\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\2\3\15\4\1\1\1\3\1\1"+
    "\1\5\1\6\1\3\14\6\1\3\1\6\1\7\1\10"+
    "\2\0\13\4\1\3\2\4\1\3\5\4\14\6\1\3"+
    "\5\6\1\11\1\12\1\13\1\14\2\0\17\4\16\6"+
    "\1\0\7\4\6\6\4\4\4\6\1\4\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\106\0\214\0\106\0\257"+
    "\0\322\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7"+
    "\0\u01ea\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\106"+
    "\0\u02df\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1"+
    "\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9"+
    "\0\106\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be"+
    "\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\257"+
    "\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb"+
    "\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3"+
    "\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u0a41\0\106\0\106\0\106\0\106\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf"+
    "\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7"+
    "\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff"+
    "\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117"+
    "\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\2\10\1\14\1\15\4\10\1\16\1\17"+
    "\1\20\1\21\1\22\2\10\1\23\1\24\1\25\2\26"+
    "\1\27\1\7\1\30\1\3\1\31\2\3\1\31\2\32"+
    "\3\31\1\33\1\34\2\31\1\35\1\36\4\31\1\37"+
    "\1\40\1\41\1\42\1\43\2\31\1\44\1\45\1\46"+
    "\2\47\1\50\1\32\1\51\1\52\45\0\1\5\44\0"+
    "\1\53\1\54\43\0\26\10\15\0\3\10\1\55\22\10"+
    "\15\0\4\10\1\56\21\10\15\0\21\10\1\57\1\60"+
    "\3\10\15\0\5\10\1\57\3\10\1\61\1\62\13\10"+
    "\15\0\11\10\1\63\2\10\1\64\1\65\6\10\1\66"+
    "\1\10\15\0\13\10\1\67\4\10\1\70\5\10\15\0"+
    "\13\10\1\71\12\10\15\0\4\10\1\72\5\10\1\73"+
    "\13\10\15\0\12\10\1\74\6\10\1\75\4\10\15\0"+
    "\12\10\1\76\13\10\15\0\11\10\1\77\14\10\15\0"+
    "\12\10\1\100\13\10\43\0\1\7\44\0\1\7\43\0"+
    "\1\7\3\0\1\31\2\0\36\31\2\0\1\31\2\0"+
    "\7\31\1\101\26\31\2\0\1\31\2\0\24\31\1\102"+
    "\1\103\10\31\2\0\1\31\2\0\10\31\1\102\3\31"+
    "\1\104\1\105\20\31\2\0\1\31\2\0\14\31\1\106"+
    "\2\31\1\107\1\110\6\31\1\111\6\31\2\0\1\31"+
    "\2\0\16\31\1\112\4\31\1\32\12\31\2\0\1\31"+
    "\2\0\16\31\1\113\17\31\2\0\1\31\2\0\7\31"+
    "\1\114\5\31\1\115\20\31\2\0\1\31\2\0\15\31"+
    "\1\116\6\31\1\117\11\31\2\0\1\31\2\0\15\31"+
    "\1\120\20\31\2\0\1\31\2\0\14\31\1\121\21\31"+
    "\2\0\1\31\2\0\15\31\1\122\20\31\2\0\1\31"+
    "\2\0\31\31\1\32\4\31\2\0\1\31\2\0\33\31"+
    "\1\32\2\31\2\0\1\31\2\0\34\31\1\32\1\31"+
    "\13\0\1\123\7\0\1\124\1\125\16\0\1\126\1\0"+
    "\1\53\1\4\1\5\40\53\5\127\1\130\35\127\6\0"+
    "\4\10\1\131\21\10\15\0\14\10\1\132\11\10\15\0"+
    "\10\10\1\133\15\10\15\0\15\10\1\67\10\10\15\0"+
    "\5\10\1\74\20\10\15\0\13\10\1\134\12\10\15\0"+
    "\12\10\1\135\13\10\15\0\3\10\1\136\22\10\15\0"+
    "\23\10\1\137\2\10\15\0\15\10\1\140\10\10\15\0"+
    "\14\10\1\70\11\10\15\0\10\10\1\141\15\10\15\0"+
    "\20\10\1\142\5\10\15\0\16\10\1\143\7\10\15\0"+
    "\3\10\1\70\22\10\15\0\12\10\1\144\13\10\15\0"+
    "\13\10\1\145\12\10\15\0\15\10\1\146\10\10\15\0"+
    "\15\10\1\147\10\10\7\0\1\31\2\0\17\31\1\150"+
    "\16\31\2\0\1\31\2\0\13\31\1\151\22\31\2\0"+
    "\1\31\2\0\20\31\1\112\15\31\2\0\1\31\2\0"+
    "\10\31\1\116\25\31\2\0\1\31\2\0\16\31\1\152"+
    "\17\31\2\0\1\31\2\0\15\31\1\153\20\31\2\0"+
    "\1\31\2\0\6\31\1\154\27\31\2\0\1\31\2\0"+
    "\26\31\1\155\7\31\2\0\1\31\2\0\20\31\1\156"+
    "\15\31\2\0\1\31\2\0\17\31\1\32\16\31\2\0"+
    "\1\31\2\0\13\31\1\157\22\31\2\0\1\31\2\0"+
    "\23\31\1\160\12\31\2\0\1\31\2\0\21\31\1\161"+
    "\14\31\2\0\1\31\2\0\6\31\1\32\27\31\2\0"+
    "\1\31\2\0\15\31\1\162\20\31\2\0\1\31\2\0"+
    "\16\31\1\163\17\31\2\0\1\31\2\0\20\31\1\164"+
    "\15\31\2\0\1\31\2\0\20\31\1\165\15\31\2\0"+
    "\5\127\1\166\35\127\4\0\1\5\1\130\43\0\5\10"+
    "\1\167\20\10\15\0\16\10\1\170\7\10\15\0\4\10"+
    "\1\70\21\10\15\0\10\10\1\67\3\10\1\171\11\10"+
    "\15\0\3\10\1\67\22\10\15\0\16\10\1\172\7\10"+
    "\15\0\13\10\1\173\12\10\15\0\14\10\1\174\11\10"+
    "\15\0\15\10\1\65\10\10\15\0\5\10\1\175\20\10"+
    "\15\0\2\10\1\146\23\10\15\0\5\10\1\67\20\10"+
    "\15\0\23\10\1\70\2\10\15\0\21\10\1\133\4\10"+
    "\15\0\17\10\1\70\6\10\7\0\1\31\2\0\21\31"+
    "\1\176\14\31\2\0\1\31\2\0\7\31\1\32\26\31"+
    "\2\0\1\31\2\0\13\31\1\112\3\31\1\177\16\31"+
    "\2\0\1\31\2\0\6\31\1\112\27\31\2\0\1\31"+
    "\2\0\21\31\1\200\14\31\2\0\1\31\2\0\16\31"+
    "\1\201\17\31\2\0\1\31\2\0\17\31\1\202\16\31"+
    "\2\0\1\31\2\0\20\31\1\110\15\31\2\0\1\31"+
    "\2\0\10\31\1\203\25\31\2\0\1\31\2\0\5\31"+
    "\1\164\30\31\2\0\1\31\2\0\10\31\1\112\25\31"+
    "\2\0\1\31\2\0\26\31\1\32\7\31\2\0\1\31"+
    "\2\0\24\31\1\151\11\31\2\0\1\31\2\0\22\31"+
    "\1\32\13\31\2\0\4\127\1\5\1\166\35\127\6\0"+
    "\6\10\1\70\17\10\15\0\3\10\1\204\22\10\15\0"+
    "\15\10\1\205\10\10\15\0\7\10\1\67\16\10\15\0"+
    "\4\10\1\147\21\10\15\0\7\10\1\206\16\10\15\0"+
    "\16\10\1\207\7\10\7\0\1\31\2\0\6\31\1\210"+
    "\27\31\2\0\1\31\2\0\20\31\1\211\15\31\2\0"+
    "\1\31\2\0\12\31\1\112\23\31\2\0\1\31\2\0"+
    "\7\31\1\165\26\31\2\0\1\31\2\0\12\31\1\212"+
    "\23\31\2\0\1\31\2\0\21\31\1\213\14\31\10\0"+
    "\13\10\1\70\12\10\15\0\13\10\1\214\12\10\15\0"+
    "\11\10\1\70\14\10\15\0\21\10\1\67\4\10\7\0"+
    "\1\31\2\0\16\31\1\32\17\31\2\0\1\31\2\0"+
    "\16\31\1\215\17\31\2\0\1\31\2\0\14\31\1\32"+
    "\21\31\2\0\1\31\2\0\24\31\1\112\11\31\10\0"+
    "\16\10\1\133\7\10\7\0\1\31\2\0\21\31\1\151"+
    "\14\31\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4585];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\20\1\1\11"+
    "\20\1\1\11\1\1\2\0\46\1\4\11\2\0\35\1"+
    "\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  public List<String> constList = new ArrayList<String>();
  public List<String> idnList = new ArrayList<String>();

  public static String[] fixedLexems = {"break", "case", "char", "const", "continue", "default", "do", 
		  "double", "else", "exit", "float", "for", "if", "int", "long", 
		  "return", "short", "signed", "struct", "switch", "unsigned", "void", 
		  "while", "&&", ">", "<", "==", "<=", ">=", "!=", "&&", "||", "!", "+", 
		  "-", "*", "/", "%", "=", "}", "{", "]", "[", "(", ")", ":", ";", 
		  "\"", "'", ",", "."};
  
  public List<String> fixedList = new ArrayList<String>();
  
  private Token newToken(Token.Type type, String value) {
	  List<String> list = null;

	  if(type.equals(Token.Type.CONST)) {
		  list = constList;
	  } else if (type.equals(Token.Type.IDN)) {
		  list = idnList;
	  } else {
		  list = fixedList;
	  }
	  
	  int i = list.indexOf(value);
	  if(i==-1) {
		  list.add(value);
		  i=list.size();
	  }
      Token token = new Token(type, i);
      token.setCol(yycolumn);
      token.setLine(yyline);
	  return new Token(type, i);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1770) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { string.append('\t');
          }
        case 13: break;
        case 1: 
          { throw new Error("Illegal character <"+
                                                    yytext()+">");
          }
        case 14: break;
        case 4: 
          { return newToken(Token.Type.IDN, yytext());
          }
        case 15: break;
        case 2: 
          { /* ignore */
          }
        case 16: break;
        case 8: 
          { string.append('\\');
          }
        case 17: break;
        case 12: 
          { string.append('\"');
          }
        case 18: break;
        case 9: 
          { string.append('\r');
          }
        case 19: break;
        case 10: 
          { string.append('\n');
          }
        case 20: break;
        case 3: 
          { return newToken(Token.Type.KEY, yytext());
          }
        case 21: break;
        case 6: 
          { string.append( yytext() );
          }
        case 22: break;
        case 5: 
          { string.setLength(0); yybegin(STRING);
          }
        case 23: break;
        case 7: 
          { yybegin(YYINITIAL); 
                                   return newToken(Token.Type.CONST, 
                                   string.toString());
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
